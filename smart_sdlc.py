# -*- coding: utf-8 -*-
"""smart_SDLC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Fa1nn1q616Of-uWxpJA1pplSM6JhSMG
"""

!pip install transformers torch gradio PyPDF2 huggingface_hub -q

import gradio as gr
import torch
import PyPDF2
from transformers import AutoTokenizer, AutoModelForCausalLM
from huggingface_hub import login

# ===============================
# 1. Authenticate Hugging Face
# ===============================

# Directly provide your Hugging Face token
hf_token = "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"

# Login with the token
try:
    login(hf_token)
    print("‚úÖ Logged in to Hugging Face Hub.")
except Exception as e:
    raise ValueError(f"‚ùå Failed to log in to Hugging Face: {e}")

# ===============================
# 2. Load IBM Granite Model
# ===============================
model_name = "ibm-granite/granite-3.2-2b-instruct"

try:
    tokenizer = AutoTokenizer.from_pretrained(model_name, use_auth_token=hf_token)
    model = AutoModelForCausalLM.from_pretrained(
        model_name,
        use_auth_token=hf_token,
        torch_dtype=torch.float16 if torch.cuda.is_available() else torch.float32,
        device_map="auto" if torch.cuda.is_available() else None
    )
    if tokenizer.pad_token is None:
        tokenizer.pad_token = tokenizer.eos_token
    print("‚úÖ Model loaded successfully.")
except Exception as e:
    raise RuntimeError(f"‚ùå Failed to load model: {e}")

# ===============================
# 3. Helper Functions
# ===============================

def generate_response(prompt, max_length=1024):
    if 'model' not in globals() or model is None:
        return "‚ùå Error: Model not loaded."

    inputs = tokenizer(prompt, return_tensors="pt", truncation=True, max_length=512)
    if torch.cuda.is_available():
        inputs = {k: v.to(model.device) for k, v in inputs.items()}

    with torch.no_grad():
        outputs = model.generate(
            **inputs,
            max_length=max_length,
            temperature=0.7,
            do_sample=True,
            pad_token_id=tokenizer.eos_token_id
        )
    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.replace(prompt, "").strip()

def extract_text_from_pdf(pdf_file, max_pages=10):
    if pdf_file is None:
        return ""
    try:
        with open(pdf_file.name, "rb") as f:
            pdf_reader = PyPDF2.PdfReader(f)
            text = ""
            for i, page in enumerate(pdf_reader.pages[:max_pages]):
                page_text = page.extract_text()
                if page_text:
                    text += page_text + "\n"
            return text.strip()
    except Exception as e:
        return f"‚ùå Error reading PDF: {str(e)}"

def requirement_analysis(pdf_file, prompt_text):
    if pdf_file is not None:
        content = extract_text_from_pdf(pdf_file)
        if content.startswith("Error"):
            return content
    else:
        content = prompt_text.strip()

    if not content:
        return "‚ùó Please upload a PDF or enter some text."

    analysis_prompt = (
        "You are a software requirements analyst. Analyze the following text and extract and categorize "
        "the information into three sections:\n\n"
        "*1. Functional Requirements:* What the system should do.\n"
        "*2. Non-Functional Requirements:* Performance, scalability, security, etc.\n"
        "*3. Technical Specifications:* APIs, libraries, platforms, or tools.\n\n"
        f"{content}"
    )

    return generate_response(analysis_prompt, max_length=1200)

def code_generation(prompt, language):
    prompt = prompt.strip()
    if not prompt:
        return "‚ùó Please describe the code requirement."

    code_prompt = f"Generate {language} code for the following requirement:\n\n{prompt}\n\nCode:"
    return generate_response(code_prompt, max_length=1200)

# ===============================
# 4. Gradio App UI
# ===============================
with gr.Blocks() as app:
    gr.Markdown("# üöÄ AI SDLC Tool: Requirement Analysis & Code Generator")

    with gr.Tabs():
        # === Tab 1: Requirements Analysis ===
        with gr.TabItem("Requirements Analysis"):
            with gr.Row():
                with gr.Column():
                    pdf_upload = gr.File(label="Upload PDF", file_types=[".pdf"])
                    prompt_input = gr.Textbox(
                        label="Or write requirements here",
                        placeholder="Describe your software requirements...",
                        lines=5
                    )
                    analyze_btn = gr.Button("Analyze")
                with gr.Column():
                    analysis_output = gr.Textbox(label="Requirements Analysis", lines=20)
            analyze_btn.click(requirement_analysis, inputs=[pdf_upload, prompt_input], outputs=analysis_output)

        # === Tab 2: Code Generation ===
        with gr.TabItem("Code Generation"):
            with gr.Row():
                with gr.Column():
                    code_prompt = gr.Textbox(
                        label="Code Requirements",
                        placeholder="Describe what code you want to generate...",
                        lines=5
                    )
                    language_dropdown = gr.Dropdown(
                        choices=["Python", "JavaScript", "Java", "C++", "C#", "PHP", "Go", "Rust"],
                        label="Programming Language",
                        value="Python"
                    )
                    generate_btn = gr.Button("Generate Code")
                with gr.Column():
                    code_output = gr.Textbox(label="Generated Code", lines=20)
            generate_btn.click(code_generation, inputs=[code_prompt, language_dropdown], outputs=code_output)

# ===============================
# 5. Launch App
# ===============================
app.launch(share=True)